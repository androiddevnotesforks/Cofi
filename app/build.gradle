plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.jaredsburrows.license'
    id("org.jetbrains.kotlin.plugin.compose") version "2.1.0"
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    signingConfigs {
        if (keystoreProperties.containsKey('storeFile')) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile rootProject.file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    defaultConfig {
        applicationId "com.omelan.cofi"
        minSdkVersion 25
        targetSdkVersion 36
        compileSdk 36
        versionCode 188
        versionName "1.21.11"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        manifestPlaceholders = [profileable: false]
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig keystoreProperties.containsKey('storeFile') ?
                    signingConfigs.release : signingConfigs.debug
        }

        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }

        benchmark {
            signingConfig signingConfigs.debug
            minifyEnabled true
            manifestPlaceholders["profileable"] = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".benchmark"
            versionNameSuffix "-benchmark"
        }
    }

    flavorDimensions.add("version")
    productFlavors {
        instant {
            dimension "version"
            versionCode android.defaultConfig.versionCode - 1
            versionNameSuffix "-instant"
            minSdkVersion 26
        }
        playStore {
            dimension "version"
        }
        full {
            dimension "version"
            versionCode android.defaultConfig.versionCode
        }
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_19
        targetCompatibility JavaVersion.VERSION_19
    }

    kotlin {
        jvmToolchain(19)
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES',
                         'META-INF/LICENSE',
                         'META-INF/LICENSE.txt',
                         'META-INF/license.txt',
                         'META-INF/NOTICE',
                         'META-INF/NOTICE.txt',
                         'META-INF/notice.txt',
                         'META-INF/ASL2.0',
                         'META-INF/AL2.0',
                         'META-INF/LGPL2.1',
                         'META-INF/*.kotlin_module']
        }
    }


    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    namespace 'com.omelan.cofi'

}

licenseReport {
    generateCsvReport = false
    generateHtmlReport = false
    generateJsonReport = true
    // These options are ignored for Java projects
    copyHtmlReportToAssets = false
    copyHtmlReportToAssets = false
    copyJsonReportToAssets = true
}

configurations {
    ktlint
}

dependencies {
    implementation project(path: ':cofi-share')
    ktlint("com.pinterest:ktlint:0.50.0") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
    implementation platform("androidx.compose:compose-bom:$compose_bom_version")

    instantImplementation('com.google.android.gms:play-services-instantapps:18.1.0')
    playStoreImplementation 'com.google.android.gms:play-services-wearable:19.0.0'
    playStoreImplementation "androidx.wear:wear-remote-interactions:1.1.0"
    playStoreImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.10.2'

    // Tooling support (Previews, etc.)
    debugImplementation "androidx.compose.ui:ui-tooling"
    implementation "androidx.compose.ui:ui-tooling-preview"

    // Material Design
    implementation "androidx.compose.material3:material3:1.4.0-alpha16"
    implementation "androidx.compose.material3:material3-window-size-class"

    implementation 'com.github.KieronQuinn:MonetCompat:0.2.1'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    // Navigation
    implementation "androidx.navigation:navigation-compose:2.9.0"

    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata"
    // Jetpack Utils
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.36.0"
    implementation "androidx.compose.animation:animation-graphics"

    implementation "androidx.activity:activity-compose:1.10.1"

    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.8.3"
    testImplementation 'junit:junit:4.13.2'
    androidTestUtil 'androidx.test:orchestrator:1.5.1'
}

tasks.register("ktlintCheck", JavaExec) {
    group = "verification"
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
    args "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.named("check") {
    dependsOn tasks.named("ktlintCheck")
}

tasks.register("ktlintFormat", JavaExec) {
    group = "formatting"
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
    args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
}

